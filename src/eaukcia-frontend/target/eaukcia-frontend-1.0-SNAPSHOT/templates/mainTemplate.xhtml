<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:rich="http://richfaces.org/rich"
      xmlns:a4j="http://richfaces.org/a4j"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:c="http://java.sun.com/jsp/jstl/core">


    <f:view locale="#{facesContext.viewRoot.locale}">
        <head>
            <meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/>
            <link href="css/style.css" rel="stylesheet" type="text/css"/>
            <link href="css/style-tree.css" rel="stylesheet" type="text/css"/>
            <title>ProSale</title>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css">
            </link>
                <script src="http://code.jquery.com/jquery-latest.min.js"
            type="text/javascript"></script>
            <script src="http://code.highcharts.com/highcharts.js"></script>
            <script src="http://code.highcharts.com/modules/exporting.js"></script>
            <script type="text/javascript" src="http://www.highcharts.com/media/com_demo/highslide-full.min.js"></script>
            <script type="text/javascript" src="http://www.highcharts.com/media/com_demo/highslide.config.js" charset="utf-8"></script>
            <script type="text/javascript" 
                src="js/d3.js">
            </script>
            <script type="text/javascript" 
                 src="js/d3.layout.js">
            </script>
            <script type="text/javascript">
            
            //<![CDATA[alert("ok3");
            var appModes = {
                "ADD_NEW_AUCTION_MODE" : "ADD_NEW_AUCTION",
                "PRODUCTS_COMPARISON_MODE" : "PRODUCTS_COMPARISON",
                "USERS_COMPARISON_MODE" : "USERS_COMPARISON",
                "AUCTIONS_COMPARISON_MODE" : "AUCTIONS_COMPARISON",
                "TREE_VISUALIZATION_OF_AUCTION" : "TREE_VISUALIZATION_OF_AUCTION"
            }
            //making data for main chart
            var applicationMode = "#{auctionBean.applicationMode.toString()}";  
            var selectedCodes =  #{auctionBean.selectedCodesJSON};
            var selectedAuctions = #{auctionBean.selectedAuctionsJSON};
            var selectedUsers = #{auctionBean.selectedUsersJSON};
            
            var pole = #{auctionBean.historyOfOfferForNodes};
            var whichUsersMadeBid = #{auctionBean.usersBidJSON};
            var nameOfNodes =#{auctionBean.JSNameOfNode}; 
            var legendNames = #{auctionBean.legendForChart};
                dataToChart = [];
            var dataObjects = [];
            //TODO for more code for loop..
            
            //if is no slected code we want to add root
            var numberOfIteration = function(){
                if(applicationMode == appModes.PRODUCTS_COMPARISON_MODE){
                   return selectedCodes.length == 0? 1 : selectedCodes.length;
                }
                else if(applicationMode == appModes.USERS_COMPARISON_MODE){
                    return selectedUsers.length;
                }
                else if(applicationMode == appModes.AUCTIONS_COMPARISON_MODE){
                    return Object.keys(selectedAuctions).length;
                }
            }
            //var numberOfIteration = selectedCodes.length == 0? 1 : selectedCodes.length;
            var n = numberOfIteration();
            for(var j=0; j < n; j++){
                if(typeof pole[j] === "undefined") {
                    continue;
                }
                var dataObject = []; 
                for(var i=0;i < pole[j].length; i++){
                    var array = pole[j][i];
                    var object = {
                                 'x' : array[0],
                                 'y' : array[1],
                                 'user' : array[2],
                                 'fullOffer' : array[3]
                                 }
                    dataObject.push(object);
                }
                dataObjects.push(dataObject);
            }
           
            for(var i=0;i < pole.length; i++){
                var line = {};
                line.data = dataObjects[i];
                line.name = legendNames[i];
                dataToChart.push(line);
            }
            
                        
            $(function  () {    
             function drawTree(DOMelement){
                 var m = [40, 120, 40, 120],
                        w = 1200 - m[1] - m[3],
                        h = 600 - m[0] - m[2],
                        i = 0,                                                                                                                                                                                                                  
                        root;

                    var tree = d3.layout.tree()
                        .size([h, w]);

                    var diagonal = d3.svg.diagonal()
                        .projection(function(d) { return [d.y, d.x]; });

                    var vis = d3.select(DOMelement).append("svg:svg")
                        .attr("width", w + m[1] + m[3])
                        .attr("height", h + m[0] + m[2])
                      .append("svg:g")
                        .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
                        //TODO remove json call
                   // d3.json("js/flame.json", function(json) {
                      //root = json;
                      root = #{auctionBean.hierarchyForTree};
                      root.x0 = h / 2;
                      root.y0 = 0;
                      console.log(root);
                      function toggleAll(d) {
                        if (d.children) {
                          d.children.forEach(toggleAll);
                          toggle(d);
                        }
                      }
                      root.children.forEach(toggleAll);
                      update(root);
                   // });
                 
                function update(source) {
                     var duration = d3.event && d3.event.altKey ? 5000 : 500;
                       // compute the new height
                    var levelWidth = [1];
                    var childCount = function(level, n) {

                      if(n.children && n.children.length > 0) {
                        if(levelWidth.length <= level + 1) levelWidth.push(0);

                        levelWidth[level+1] += n.children.length;
                        n.children.forEach(function(d) {
                          childCount(level + 1, d);
                        });
                      }
                    };
                    childCount(0, root); 
                     var newHeight = d3.max(levelWidth) * 80; // CHANGED 40 pixels per line  
                     tree = tree.size([newHeight, w]);
                     // Compute the new tree layout.
                     var nodes = tree.nodes(root).reverse();

                     // Normalize for fixed-depth.
                     nodes.forEach(function(d) { d.y = d.depth * 180; });

                     // Update the nodes…
                     var node = vis.selectAll("g.node")
                         .data(nodes, function(d) { return d.id || (d.id = ++i); });

                     // Enter any new nodes at the parent's previous position.
                     var nodeEnter = node.enter().append("svg:g")
                         .attr("class", "node")
                         .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
                         .on("click", function(d) { toggle(d); update(d); });

                     nodeEnter.append("svg:circle")
                         .attr("r", 1e-6)
                         .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

                     nodeEnter.append("svg:text")
                         .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
                         .attr("dy", ".35em")
                         .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
                         .text(function(d) { return d.name; })
                         .style("fill-opacity", 1e-6);

                     // Transition nodes to their new position.
                     var nodeUpdate = node.transition()
                         .duration(duration)
                         .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

                     nodeUpdate.select("circle")
                         .attr("r", 4.5)
                         .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

                     nodeUpdate.select("text")
                         .style("fill-opacity", 1);

                     // Transition exiting nodes to the parent's new position.
                     var nodeExit = node.exit().transition()
                         .duration(duration)
                         .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
                         .remove();

                     nodeExit.select("circle")
                         .attr("r", 1e-6);

                     nodeExit.select("text")
                         .style("fill-opacity", 1e-6);

                     // Update the links…
                     var link = vis.selectAll("path.link")
                         .data(tree.links(nodes), function(d) { return d.target.id; });

                     // Enter any new links at the parent's previous position.
                     link.enter().insert("svg:path", "g")
                         .attr("class", "link")
                         .attr("d", function(d) {
                           var o = {x: source.x0, y: source.y0};
                           return diagonal({source: o, target: o});
                         })
                       .transition()
                         .duration(duration)
                         .attr("d", diagonal);

                     // Transition links to their new position.
                     link.transition()
                         .duration(duration)
                         .attr("d", diagonal);

                     // Transition exiting nodes to the parent's new position.
                     link.exit().transition()
                         .duration(duration)
                         .attr("d", function(d) {
                           var o = {x: source.x, y: source.y};
                           return diagonal({source: o, target: o});
                         })
                         .remove();

                     // Stash the old positions for transition.
                     nodes.forEach(function(d) {
                       d.x0 = d.x;
                       d.y0 = d.y;
                     });
                   }

                   // Toggle children.
                   function toggle(d) {
                     if (d.children) {
                       d._children = d.children;
                       d.children = null;
                     } else {
                       d.children = d._children;
                       d._children = null;
                     }
                   }

                 
                 
             }   
            
             //for(var i = 0; i < selectedCodes.length;i++){
             //           id = selectedCodes[i];
             //           drawTree(".tree" + i.toString(), id);
             //}
             //TODO only if TREE_VISUALIZATION_OF_AUCTION ?
             if(Object.keys(selectedAuctions).length > 0){
                 drawTree(".tree");
             }
             
            // ################## end of tree ###################
            
            
            var childrensNames =  #{auctionBean.childrensNameOfAllId};
            var childrensValues =  #{auctionBean.childrensValueOfAllId};
            //making data for pie chart
            var dataForPieChart = [];
            for(var id=0;id < childrensValues.length; id++){
                var childrens = [];
                for(var i=0;i < childrensNames[id].length; i++){
                    var children = [childrensNames[id][i], childrensValues[id][i]];
                    childrens.push(children)
                }
                dataForPieChart.push(childrens)
            }
            
            $(document).on('click', ".deleteFilter"  , function() {
                var id = $(this).parent().attr('id');
                alert(id);
                var index = selectedCodes.indexOf(id);
                selectedCodes.splice(index, 1);
                $( this ).parent().hide();
            });
                
            $(document).on('click', ".deleteUser"  , function() {
                 var userName = $(this).parent().attr('id');            
                    alert(userName);
                    var index = selectedUsers.indexOf(userName);
                    selectedUsers.splice(userName, 1);
                    $( this ).parent().hide();
            });
            
             $(document).on('click', "#headOfTableForHistory"  , function() {
                   $('.nodesInHistory').toggle();
            });
                  
            var redirect = function(url){
                 window.location.replace(url);
            };
                
            var getUrl = function(){
                var BASE_URL = "http://localhost:8080/eaukcia/index.faces?id=";
                var result = BASE_URL;
                for(var i = 0; i < selectedCodes.length;i++){
                    id = selectedCodes[i];
                    result = result + id;
                    if(i+1 < selectedCodes.length){
                        result = result + ",";
                    }
                }
                //users
                var USERS_PREFIX = "&users=";
                if(selectedUsers.length > 0){
                    result += USERS_PREFIX;
                    for(var i = 0; i < selectedUsers.length;i++){
                        name = selectedUsers[i];
                        result += name;
                        if(i+1 < selectedUsers.length){
                            result +=",";
                        }
                    }
                }


                //auctions
                var AUCTIONS_PREFIX = "&auctions=";
                if(Object.keys(selectedAuctions).length > 0){
                    result += AUCTIONS_PREFIX;
                    var auctionHashs = Object.keys(selectedAuctions);
                    for(var i = 0; i < auctionHashs.length;i++){
                        auction = auctionHashs[i];
                        result += auction;
                        if(i+1 < auctionHashs.length){
                            result +=",";
                        }
                    }
                }


                return result;
            };
                
                $("#confirmAuction").click(function() {
                    var url = getUrl();
                    redirect(url);
                });
                
                $("#showNewPage").click(function() {
                    var url = getUrl();
                    redirect(url);
                });
                
                addProduct = function (el){
                    var id = el.value;
                    if(applicationMode == appModes.PRODUCTS_COMPARISON_MODE){
                        //TODO
                    }
                     else{  //we want select only one id of product 
                         selectedCodes = [];
                         $("#selectedProducts").html("");
                     }
                    selectedCodes.push(id);
                    var name = el.options[el.selectedIndex].innerHTML;
                    
                    jQuery('<div/>', {
                        id: id,
                        text: name,
                        html:"<button type='button' class='btn btn-default'>" + name +  "</button>\
                              <button class='deleteFilter btn btn-danger' type='button'>-</button>"
                    }).appendTo('#selectedProducts');
                };
                
                addUser = function(el){
                     var userName = el.value;
                     if(selectedUsers.indexOf(userName) != -1){ // is already there
                         alert("User was already selected!");
                         return;
                     } 
                     if(applicationMode == appModes.USERS_COMPARISON_MODE){
                         
                     }
                     else{  //we want select only one user 
                         selectedUsers = [];
                         $("#selectedUsers").html("");
                     }
                     selectedUsers.push(userName);
                     alert(userName);
                     jQuery('<div/>', {
                        id: userName,
                        text: userName,
                        html:"<button type='button' class='btn btn-default'>" + userName +  "</button>\
                              <button class='deleteUser btn btn-danger' type='button'>-</button>"
                    }).appendTo('#selectedUsers');
                };
                
                addAuction = function(el){
                     //TODO refresh whole site because of prodycut in DELETE of aucton too
                     var auctionNameHash = el.value;
                     var auctionName = null;
                     for(var i = 0; i < el.length; i++){
                         if(el[i].value == auctionNameHash){
                             auctionName = el[i].label;
                         }
                     }
                     if(applicationMode == appModes.AUCTIONS_COMPARISON_MODE){
                         
                     }
                     else{  //we want select only one auction 
                         selectedAuctions = [];
                         $("#selectedAuctions").html("");
                     }
                     
                     if(selectedAuctions[auctionNameHash] == undefined){
                        selectedAuctions[auctionNameHash] = auctionName;
                        alert(auctionName);
                     }
                     else{
                         alert("Auction was already added");
                     }
                     jQuery('<div/>', {
                        id: auctionNameHash,
                        text: auctionName,
                        html:"<button type='button' class='btn btn-default'>" + auctionName +  "</button>\
                              <button class='deleteAuction btn btn-danger' type='button'>-</button>"
                    }).appendTo('#selectedAuctions');
                };
                
                var datesOfOffers = #{auctionBean.offersDate};
                $('#container').highcharts({
                    chart: {
                        zoomType: 'x'
                    },
                    title: {
                        text: 'Vyvoj ceny'
                    },
                    subtitle: {
                        text: ''
                    },
                    xAxis: {
                           type: 'datetime',
                            dateTimeLabelFormats: { // don't display the dummy year
                                month: '%e. %b',
                                year: '%b'
                            },
                            title: {
                                text: 'Date'
                            }
                    },
                    yAxis: {
                        title: {
                            text: 'Prize'
                        },
                        labels: {
                            formatter: function () {
                                return this.value ;
                            }
                        }
                    },
                    tooltip: {
                        formatter: function() {
                            return 'Value:' + this.point.y + '<br>Time: ' + new Date(this.x) + '<br>By user: <b>'+ this.point.user +'</b>';
                         }
                    },
                    plotOptions: {
                        series: {
                            point: {
                                events: {
                                    click: function (e) {
                                        text = "Bid from " + this.user + "<br>" ;
                                        text += "changed " + Object.keys(this.fullOffer).length + " items <br>"; 
                                        for (var key in this.fullOffer) {
                                            if (this.fullOffer.hasOwnProperty(key)) {
                                                text += key + " =>" + this.fullOffer[key];
                                                text+= "<br><br>";
                                                //alert(key + " -> " + p[key]);
                                            }
                                         }
                                //newwindow=window.open("http://www.sme.sk/                                                                                                                                                                                                                                                                                           ",'name','height=200,width=150');
                                //if (window.focus) {newwindow.focus()}
                                        hs.htmlExpand(null, {
                                             pageOrigin: {
                                                x: e.pageX || e.clientX,
                                                y: e.pageY || e.clientY
                                             },
                                            maincontentText: text,
                                            width: 200
                                        });
                                    }
                                }
                            }
                    },
                    spline: {
                            marker: {
                                radius: 4,
                                lineColor: '#666666',
                                lineWidth: 1
                            }
                        }
                    },
                    series: dataToChart
                });
                
                function drawPieChart (idOfDOM, dataForPieChart, parentName){
                console.log(dataForPieChart);
                    $("#" + idOfDOM).highcharts({
                        chart: {
                            plotBackgroundColor: null,
                            plotBorderWidth: 1,//null,
                            plotShadow: false
                        },
                        title: {
                            text: 'Rolozenie pod-poloziek: ' + parentName
                        },
                        tooltip: {                              
                        },
                        plotOptions: {
                            pie: {
                                allowPointSelect: true,
                                cursor: 'pointer',
                                dataLabels: {
                                    enabled: true,
                                    format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                                    style: {
                                        color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                                    }
                                }
                            }
                        },
                        series: [{
                            type: 'pie',
                            name: 'Browser share',
                            data: dataForPieChart
                        }]
                    });
                }
                
                
                function drawAllPieCharts(){
                     for(var i = 0; i < selectedCodes.length;i++){
                            drawPieChart("pie" + i.toString(), dataForPieChart[i], nameOfNodes[i]);
                     }
                }
                drawAllPieCharts();
            });
            //]]>
            </script>
        </head>
        <body>
           <div class="row">
            <div class="col-xs-3 col-sm-3 col-md-3">
                <div class="sidebar-nav">
                  <div class="navbar navbar-default" role="navigation">
                    <div class="navbar-header">
                      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".sidebar-navbar-collapse">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                      </button>
                      <span class="visible-xs navbar-brand">Sidebar menu</span>
                    </div>
                    <div class="navbar-collapse collapse sidebar-navbar-collapse">
                      <ul class="nav">
                        <li class="active"><a href="#">Visualization of auction</a></li>
                        <li>
                            <h:form>
                                <h:commandButton action="#{auctionBean.setProductComparisonMode()}" value="Comaprison of products" />
                             </h:form>
                        </li>
                        <li>
                            <h:form>
                                <h:commandButton action="#{auctionBean.setUserComparisonMode()}" value="Comparison of users" />
                             </h:form>
                        </li>
                        <li> ,
                            <h:form>
                                <h:commandButton action="#{auctionBean.setAuctionComparisonMode()}" value="Comparison of auctions"/>
                            </h:form>
                        </li>
                        <li> ,
                            <h:form>
                                <h:commandButton action="#{auctionBean.setVisualizationMode()}" value="Visualization of auction"/>
                            </h:form>
                        </li>    
                        <li>
                            <a href="#">Add new auctions</a>
                        </li>
                        <br></br>
                        <br></br>
                        <br></br>
                        <br></br>
                        <br></br>
                        <br></br>
                        <br></br>
                        <br></br>
                        <br></br>
                        <br></br> 
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
                
            <div class="col-xs-9 col-sm-9 col-md-9">
               <h:panelGroup rendered="#{auctionBean.selectedAnyAuction}">
                    <h:form>
                        <h:selectOneMenu value="products" onchange="addProduct(this)">
                            <f:selectItems value="#{auctionBean.allProducts}" var="node"
                            itemValue="#{node.code.trim()}" itemLabel="#{node.name} #{node.item_id}"/>
                        </h:selectOneMenu>
                    </h:form>
                </h:panelGroup>
                <h:panelGroup rendered="#{auctionBean.selectedAnyAuction}">
                    <h:form>
                        <h:selectOneMenu value="users" onchange="addUser(this)" >
                            <f:selectItems value="#{auctionBean.allUsers}" var="user"
                            itemValue="#{user}" itemLabel="#{user}"/>
                        </h:selectOneMenu>
                    </h:form>
                </h:panelGroup>
                <h:panelGroup>
                    <h:form>
                       <h:selectOneMenu value="auctions" onchange="addAuction(this)">
                           <f:selectItems value="#{auctionBean.auctions}" var="auction"
                                          itemValue="#{auction.name.hashCode()}" itemLabel="#{auction.name}"/>
                       </h:selectOneMenu>
                   </h:form>
                </h:panelGroup>
                <h:panelGroup id="selectedUsers" rendered="#{auctionBean.selectedAnyAuction}">
                        Users:<br></br><br></br>
                        <ui:repeat var="user" value="#{auctionBean.selectedUsers}">
                            <div id="#{user}">
                              <button type='button' class='btn btn-default'> #{user}</button>
                              <button class='deleteUser btn btn-danger' type='button'>-</button>
                            </div> 
                        </ui:repeat>
                </h:panelGroup>
                <h:panelGroup id="selectedProducts" rendered="#{auctionBean.selectedAnyAuction}">
                         products:<br></br><br></br>
                    <ui:repeat var="item" value="#{auctionBean.nodes}">
                            <div id="#{item.code}">
                              <button type='button' class='btn btn-default'> #{item.name}</button>
                              <button class='deleteFilter btn btn-danger' type='button'>-</button>
                            </div> 
                        </ui:repeat>
                </h:panelGroup>
                <h:panelGroup id="selectedAuctions">
                        <br></br>Auctions:
                        <ui:repeat var="auction" value="#{auctionBean.selectedAuctionsObjects}">
                            <div id="#{auction.name.hashCode()}">
                              <button type='button' class='btn btn-default'> #{auction.name} </button>
                              <button class='deleteAuction btn btn-danger' type='button'>-</button>
                            </div> 
                        </ui:repeat>
                </h:panelGroup>
                
               
                
                <h:panelGroup  rendered="#{auctionBean.selectedAnyAuction}">
                    <button id="showNewPage" type="button" class="btn btn-success">Show</button>
                </h:panelGroup>
                
                <h:panelGroup  rendered="#{not auctionBean.selectedAnyAuction}">
                   <button id="confirmAuction" type="button" class="btn btn-success">Confirm Auction</button>
                </h:panelGroup>

            </div>       
               <h:panelGroup rendered="#{not auctionBean.visualizationOfAuctionMode and auctionBean.selectedAnyCode}">                      
                <table class="table table-striped">
                    <tr id="headOfTableForHistory">
                        <th>Name</th>
                        <th>Code</th> 
                        <th>Auction name</th>
                        <th>Unit type</th>
                        <th>Items</th>   
                        <th>Value</th>
                        <th>Value per items</th>
                    </tr>
                    <ui:repeat var="historyForCode" value="#{auctionBean.historyForNodes}">
                     <ui:repeat var="nodeInAuction" value="#{historyForCode}">
                        <tr class="nodesInHistory">
                          <td>#{nodeInAuction.nodeName}</td>
                          <td>#{nodeInAuction.nodeCode}</td> 
                          <td>#{nodeInAuction.auctionName}</td>
                          <td>#{nodeInAuction.node.unit_Type}</td>
                          <td>#{nodeInAuction.amountOfNode}</td>
                          <td>#{nodeInAuction.finalOfferForNode}</td>
                          <td>#{nodeInAuction.prizePerItem}</td>
                        </tr>
                     </ui:repeat>
                   </ui:repeat>
                  </table>
                
             </h:panelGroup> 
             
             <h:panelGroup rendered="#{not auctionBean.visualizationOfAuctionMode and auctionBean.selectedAnyCode}">>
                <table class="table table-striped">
                    <tr>
                        <th>Name</th>
                        <th>Predicted value</th>
                    </tr>
                       <ui:repeat var="predictionNode" value="#{auctionBean.prediction}">
                        <tr>
                          <td>#{predictionNode.node.name}</td>
                          <td>#{predictionNode.predictedValue}</td> 
                        </tr>
                     </ui:repeat>
                   </table>
            </h:panelGroup>
            <h:panelGroup rendered="#{not auctionBean.visualizationOfAuctionMode}"> 
                <div id="container" style="min-width: 100%; height: 600px; margin: 0 auto"></div>
            </h:panelGroup>
           
            <br></br>
            <br></br>
            <br></br>
            <br></br>
            <br></br>
            <br></br>
            <br></br>
            <br></br>
            <br></br>
            <br></br>
            
            <br></br>
            <br></br>
            <br></br>
            <br></br>
            <br></br>
            <br></br>
            <br></br>
            <br></br>
            <br></br>
            <h:panelGroup rendered="#{auctionBean.visualizationOfAuctionMode}">
                <div class="row">                
                    <div class="col-md-12">
                        <div class ="tree"></div>
                    </div> 
                </div>
            </h:panelGroup>
            
            <a4j:repeat value="#{auctionBean.selectedCodes}" var="item" rowKeyVar="index">
                 <div class="row">

                     <div class="col-md-12">
                        <div id="pie#{index}" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
                    </div> 
                  </div>
            </a4j:repeat>
<!--           <ui:repeat var="item" value="#{auctionBean.selectedCodes}">
                 <div class="row">
                     
                    <div class="col-md-12">
                        <div class ="tree#{item}"></div>
                    </div> 
                     <div class="col-md-12">
                        <div id="pie#{item}" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
                    </div> 
                  </div>
             </ui:repeat>
            -->
            
           </div>
        </body>
    </f:view>
</html>
